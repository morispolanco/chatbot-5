import streamlit as st
import requests
import json
from datetime import datetime

# Obtener la fecha actual
fecha_actual = datetime.now().strftime("%d de %B de %Y")

# Mostrar t√≠tulo, descripci√≥n y fecha de b√∫squeda
st.title("üéì Asistente de B√∫squeda de Becas")
st.write(
    f"Fecha de b√∫squeda: {fecha_actual}\n\n"
    "Este asistente te ayudar√° a encontrar becas de estudio basadas en tus intereses y antecedentes. "
    "Utilizamos inteligencia artificial para procesar tu informaci√≥n y realizar b√∫squedas personalizadas. "
    "Solo se mostrar√°n resultados de becas con convocatorias vigentes a la fecha de hoy."
)

# Obtener claves API de los secretos de Streamlit
together_api_key = st.secrets["TOGETHER_API_KEY"]
serper_api_key = st.secrets["SERPER_API_KEY"]

# Configurar los endpoints de API y headers
together_url = "https://api.together.xyz/v1/chat/completions"
serper_url = "https://google.serper.dev/search"

together_headers = {
    "Authorization": f"Bearer {together_api_key}",
    "Content-Type": "application/json"
}

serper_headers = {
    "X-API-KEY": serper_api_key,
    "Content-Type": "application/json"
}

# Funci√≥n para realizar b√∫squeda en Google usando la API de Serper
def busqueda_google(consulta):
    payload = json.dumps({"q": consulta})
    response = requests.post(serper_url, headers=serper_headers, data=payload)
    return response.json()

# Funci√≥n para obtener respuesta del LLM usando la API de Together
def obtener_respuesta_llm(mensajes):
    payload = {
        "model": "meta-llama/Meta-Llama-3.1-8B-Instruct-Turbo",
        "messages": mensajes,
        "max_tokens": 1024,
        "temperature": 0.7,
        "top_p": 0.7,
        "top_k": 50,
        "repetition_penalty": 1,
        "stop": ["<|eot_id|>", "<|eom_id|>"],
        "stream": True
    }
    return requests.post(together_url, headers=together_headers, json=payload, stream=True)

# Inicializar variables de estado de sesi√≥n
if "mensajes" not in st.session_state:
    st.session_state.mensajes = []
if "info_usuario" not in st.session_state:
    st.session_state.info_usuario = {}
if "etapa_dialogo" not in st.session_state:
    st.session_state.etapa_dialogo = 0

# Lista de preguntas
preguntas = [
    "¬øEn qu√© campo de estudio est√°s interesado?",
    "¬øEn qu√© pa√≠s o regi√≥n te gustar√≠a estudiar?",
    "¬øQu√© nivel acad√©mico est√°s buscando? (Por ejemplo: Licenciatura, Maestr√≠a, Doctorado, Postdoctorado)",
    "¬øCu√°l es tu nacionalidad?",
    "¬øEst√°s interesado solo en becas espec√≠ficas para tu nacionalidad? (Responde S√≠ o No)"
]

# Mostrar mensajes del chat
for mensaje in st.session_state.mensajes:
    with st.chat_message(mensaje["role"]):
        st.markdown(mensaje["content"])

# Di√°logo principal
if st.session_state.etapa_dialogo < len(preguntas):
    # Mostrar la pregunta actual
    with st.chat_message("assistant"):
        st.markdown(preguntas[st.session_state.etapa_dialogo])
    
    # Esperar la respuesta del usuario
    respuesta_usuario = st.chat_input("Tu respuesta aqu√≠")
    
    if respuesta_usuario:
        # Mostrar la respuesta del usuario
        with st.chat_message("user"):
            st.markdown(respuesta_usuario)
        
        # Guardar la respuesta
        st.session_state.mensajes.append({"role": "user", "content": respuesta_usuario})
        if st.session_state.etapa_dialogo == 0:
            st.session_state.info_usuario["campo"] = respuesta_usuario
        elif st.session_state.etapa_dialogo == 1:
            st.session_state.info_usuario["ubicacion"] = respuesta_usuario
        elif st.session_state.etapa_dialogo == 2:
            st.session_state.info_usuario["nivel"] = respuesta_usuario
        elif st.session_state.etapa_dialogo == 3:
            st.session_state.info_usuario["nacionalidad"] = respuesta_usuario
        elif st.session_state.etapa_dialogo == 4:
            st.session_state.info_usuario["especifica_nacionalidad"] = respuesta_usuario.lower() in ["s√≠", "si", "yes", "y", "s"]
        
        # Avanzar a la siguiente etapa
        st.session_state.etapa_dialogo += 1
        st.rerun()

elif st.session_state.etapa_dialogo == len(preguntas):
    # Procesar la informaci√≥n y buscar becas
    info_usuario = st.session_state.info_usuario
    consulta_busqueda = f"becas para {info_usuario['nivel']} en {info_usuario['campo']} en {info_usuario['ubicacion']} convocatoria abierta {fecha_actual}"
    if info_usuario.get('especifica_nacionalidad', False):
        consulta_busqueda += f" para estudiantes de {info_usuario['nacionalidad']}"

    try:
        resultados_busqueda = busqueda_google(consulta_busqueda)
    except Exception as e:
        st.error(f"Error durante la b√∫squeda en Google: {str(e)}")
        resultados_busqueda = {"organic": []}

    contexto = "Resultados de b√∫squeda para becas con convocatoria abierta:\n"
    for i, resultado in enumerate(resultados_busqueda.get('organic', [])[:5], 1):
        contexto += f"{i}. {resultado.get('title', 'Sin t√≠tulo')}: {resultado.get('snippet', 'Sin descripci√≥n')} [Enlace: {resultado.get('link', 'Sin enlace')}]\n"

    prompt = f"""
    Bas√°ndote en las siguientes preferencias del usuario y los resultados de b√∫squeda, recomienda becas adecuadas cuya convocatoria est√© abierta actualmente (fecha actual: {fecha_actual}):
    
    Preferencias del usuario:
    - Campo de estudio: {info_usuario['campo']}
    - Ubicaci√≥n de estudio deseada: {info_usuario['ubicacion']}
    - Nivel acad√©mico: {info_usuario['nivel']}
    - Nacionalidad: {info_usuario['nacionalidad']}
    - Solo interesado en becas espec√≠ficas para su nacionalidad: {"S√≠" if info_usuario.get('especifica_nacionalidad', False) else "No"}

    {contexto}

    Por favor, proporciona una respuesta detallada en espa√±ol con:
    1. Las oportunidades de becas m√°s relevantes que tengan convocatorias abiertas actualmente.
    2. Enlaces directos a las instituciones que ofrecen estas becas.
    3. Breves explicaciones de por qu√© recomiendas cada instituci√≥n o beca.
    4. Fechas de cierre de las convocatorias, si est√°n disponibles.
    5. Cualquier consejo adicional para el usuario basado en sus preferencias.

    Aseg√∫rate de incluir solo becas cuyas convocatorias est√©n abiertas en la fecha actual ({fecha_actual}).
    Al final de tu respuesta, indica nuevamente la fecha de b√∫squeda.
    """

    mensajes = [
        {"role": "system", "content": "Eres un asistente de b√∫squeda de becas muy √∫til. Proporciona informaci√≥n detallada y precisa sobre becas basada en las preferencias del usuario y los resultados de la b√∫squeda. Responde siempre en espa√±ol y aseg√∫rate de incluir solo becas con convocatorias abiertas."},
        {"role": "user", "content": prompt}
    ]

    with st.chat_message("assistant"):
        marcador_mensaje = st.empty()
        respuesta_completa = ""

        try:
            respuesta = obtener_respuesta_llm(mensajes)

            for linea in respuesta.iter_lines():
                if linea:
                    try:
                        datos = linea.decode('utf-8').split('data: ', 1)
                        if len(datos) > 1:
                            fragmento = json.loads(datos[1])
                            if fragmento['choices'][0]['finish_reason'] is None:
                                contenido = fragmento['choices'][0]['delta'].get('content', '')
                                respuesta_completa += contenido
                                marcador_mensaje.markdown(respuesta_completa + "‚ñå")
                    except json.JSONDecodeError:
                        continue

            if not respuesta_completa:
                respuesta_completa = "Lo siento, no pude encontrar becas con convocatorias abiertas que coincidan con tus criterios. Por favor, intenta ampliar tu b√∫squeda o consultar m√°s tarde."

            respuesta_completa += f"\n\nFecha de b√∫squeda: {fecha_actual}"

        except Exception as e:
            respuesta_completa = f"Ocurri√≥ un error al procesar tu solicitud: {str(e)}"

        marcador_mensaje.markdown(respuesta_completa)

    st.session_state.mensajes.append({"role": "assistant", "content": respuesta_completa})
    st.session_state.etapa_dialogo += 1

# Bot√≥n para iniciar una nueva b√∫squeda de becas
if st.button("Iniciar nueva b√∫squeda de becas"):
    st.session_state.mensajes = []
    st.session_state.info_usuario = {}
    st.session_state.etapa_dialogo = 0
    st.rerun()

# Mostrar la fecha de b√∫squeda al final de la p√°gina
st.write(f"\nFecha de b√∫squeda: {fecha_actual}")
